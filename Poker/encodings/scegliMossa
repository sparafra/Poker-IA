

%le mie carte ,  i miei soldi  ,  i soldi da pagare per partecipare e se le carte sono state cambiate o no. 

%card(2,1).
%card(4,2).
%card(13,3).
%card(13,4).
%card(13,1).

%myMoney(800).

%debtforPlaying(0).

%cardNoChanged(1).




 %situazioni che mi fanno decidere se partecipare o no alla mano , le condizioni sono impostate in maniera tale da non poter permettere che vengano generate contemporaneamente 
 % istanze di join e di fold.

	join(2):- #count{F:fold(F)} = 0, bestPoint(M) , M > 4.
	join(2):-  bestPoint(M) , M >= 3 , myMoney(B) , debtforPlaying(D) , B/8 >= D.
	join(1):- #count{F:fold(F)} = 0  ,cardNoChanged(0) , myMoney(M) , debtforPlaying(D) , (M/10) > D.
	join(1):- #count{F:fold(F)} = 0 , debtforPlaying(D) , D > 0.
	join(0):- #count{F:fold(F)} = 0.
	join(0):- debtforPlaying(0).
	%fold(M):- bestPoint(M) , M < 2.


	fold(1):- cardNoChanged(1) , myMoney(M) ,bestPoint(P) ,debtforPlaying(D)  , P <= 2 , M/8 <= D.
	fold(0):- cardNoChanged(1) , myMoney(M) ,bestPoint(P) ,debtforPlaying(D)  , P <= 3 , M <= D.
	fold(2):- cardNoChanged(1) , myMoney(M) ,bestPoint(P) ,debtforPlaying(D) , P = 1 , D > 0.
	fold(3):- myMoney(M) ,bestPoint(P) ,debtforPlaying(D) , P<=2 , M/4 <= D.


% uso i numeri 0 1 2 in join per scegliere il tipo di mossa da fare se decido di giocare la mano quindi 0 per check , 1 per call , 2 per raise , le condizioni che mi fanno scegliere 
% più la condizione soddisfatta è di alto livello più sara aggressiva la mia mossa quindi prendo il massimo in caso di join oppure foldo se ho istanze di fold.
	
	finalDecision(0, 0):- fold(_).
	finalJoin(V1) :- #max{V:join(V)} = V1.
	finalDecision(1, 0):- finalJoin(0).
	finalDecision(2,D):- finalJoin(1) , debtforPlaying(D).
	finalDecision(3,B):- finalJoin(2) , bestPoint(M) ,cardNoChanged(1),myMoney(B), M > 4.
	finalDecision(3,B/10+D):- finalJoin(2) , bestPoint(M) ,myMoney(B),debtforPlaying(D), M >= 3.


%prendo tutte le possibili combinazioni di carte che danno un punteggio assegnandogli un valore incrementale per il punteggio migliore

hCard(Vm,1) :- #max{V,P:card(V,P)} = Vm.
highCard(Vm,P,1):-hCard(Vm,1) , card(Vm,P).
couple(V,P,P1,2) :- card(V,P) , card(V,P1) , P1 != P.
dcouple(V1,V2,P,P1,P2,P3,3) :- couple(V1,P,P1,_) , couple(V2,P2,P3,_) , V1 != V2.
tris(V,P1,P2,P3,4) :- card(V,P1) , card(V,P2) , card(V,P3) , P1 != P2 , P1 != P3 , P2 != P3.
straight(V1,V5,P,P1,P2,P3,P4,5):- card(V1,P) , card(V2,P1) , card(V3,P2) , card(V4,P3) , card(V5,P4) , V2 = V1+1 , V3 = V2+1 , V4 = V3+1 , V5 = V4+1. 
flush(P,V1,V2,V3,V4,V5,6) :- card(V1,P) , card(V2,P) , card(V3,P) , card(V4,P) , card(V5,P) , V1 != V2 , V1 != V3 , V1!= V4 , V1!= V5 , V2 != V3 , V2 != V4 , V2 != V5 , V3 != V4 , V3 != V5 , V4 != V5.
full(V1,V2,P,P1,P2,P3,P4,7):- couple(V2,P,P1,2) , tris(V1,P2,P3,P4,4) , V1 != V2.
poker(V,P1,P2,P3,P4,8):- card(V,P1) , card(V,P2) , card(V,P3),card(V,P4) , P1 != P2 , P1 != P3, P1!= P4 , P2 != P3 , P2 != P4 , P3!= P4.
straightf(V1,V2,P,9):- straight(V1,V2,P,P1,P2,P3,P4,5) , flush(P,_,_,_,_,_,6).
royalF(P,10):- card(10,P) , card(11,P) , card(12,P) , card(13,P) , card(1,P).
cardNoHolded(V,P):-nhold(V,P).



%filtro il punteggio migliore che ho fatto


pointCard(N):- highCard(_,_,1) , N=1.
pointCard(N):- couple(_,_,_,2) , N =2.
pointCard(N):- dcouple(_,_,_,_,_,_,3) , N =3.
pointCard(N):- tris(_,_,_,_,4) , N = 4.
pointCard(N):- straight(_,_,_,_,_,_,_,5) , N=5.
pointCard(N):- flush(_,_,_,_,_,_,6) , N=6.
pointCard(N):- full(_,_,_,_,_,_,_,7) , N=7.
pointCard(N):- poker(_,_,_,_,_,8) , N=8.
pointCard(N):- straightf(_,_,_,9) , N=9.
pointCard(N):- royalF(P,10) , N=10.

bestPoint(M):- #max{N:pointCard(N)} = M.






















































